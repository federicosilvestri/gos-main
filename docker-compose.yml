version: '3'
services:
  # -------------------------------------------- #
  # -------------------------------------------- #
  # Starting with API Gateway and Load Balancer  #
  # -------------------------------------------- #
  # -------------------------------------------- #

  nginx_lb_orchestrator:
    #
    # Nginx Orchestrator instance
    #
    container_name: load_balancer_orchestrator
    restart: always
    build: ./gos-api_gateway/nginx-orchestrator
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # WARNING: with Winzozz it does not work, but we need it!
      - nginx_conf:/etc/nginx/conf.d

  nginx_lb:
    #
    # Nginx single instance
    #
    container_name: load_balancer
    restart: always
    build: ./gos-api_gateway/nginx
    labels:
      - gooutsafe.nginx_lb
    volumes:
      - nginx_conf:/etc/nginx/conf.d
      - static_contents:/static
    ports:
      - "80:80"

  api_gateway:
    #
    # API Gateway
    #
    # ! ! ! WARNING ! ! !
    # DO NOT set the container_name attribute and ports mapping
    # to allow the replication.
    #
    restart: always
    build: ./gos-api_gateway
    volumes:
      - static_contents:/static
    env_file:
      - gateway.conf
    environment:
      - USERS_MS_HOST=users_ms_worker_node
      - RESTAURANTS_MS_HOST=restaurants_ms_worker_node
      # - RESERVATION_MS_HOST=reservations_ms_worker_node
    labels:
      - gooutsafe.api_gateway_worker

  message_broker_rabmq:
    #
    # Message Broker Rabbit MQ
    #
    image: library/rabbitmq:3.6-management
    ports:
      - "15672:15672" # Management URL (only for utility)
    env_file:
      - mb_rabmq.conf

  users_ms_db:
    #
    # Users Microservice Database
    #
    image: library/postgres:10
    restart: on-failure
    env_file:
      - users_ms.conf

  users_ms_migrations:
    #
    # Users Microservice Migrations
    #
    build: ./gos-users
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    restart: on-failure
    command: flask db upgrade
    depends_on:
      - users_ms_db

  users_ms_worker_node:
    #
    # Users Microservice Worker node
    #
    build: ./gos-users
    restart: on-failure
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      - users_ms_db
      - users_ms_migrations

  restaurants_ms_db:
    #
    # Restaurant Microservice DB
    #
    image: library/postgres:10
    restart: on-failure
    env_file:
      - restaurants_ms.conf

  restaurants_ms_worker_migrations:
    #
    # Restaurant Migration Service
    #
    build: ./gos-restaurants
    restart: on-failure
    env_file:
      - restaurants_ms.conf
    command: flask db upgrade
    environment:
      - POSTGRES_HOST=restaurants_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      - restaurants_ms_db

  restaurants_ms_worker:
    #
    # Restaurant Service Flask Application
    #
    build: ./gos-restaurants
    restart: on-failure
    env_file:
      - restaurants_ms.conf
    depends_on:
      - restaurants_ms_db
      - restaurants_ms_worker_migrations
    environment:
      - POSTGRES_HOST=restaurants_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq

  restaurants_ms_worker_bg:
    #
    # Restaurant Service Background Worker
    #
    build: ./gos-restaurants
    restart: on-failure
    env_file:
      - restaurants_ms.conf
    environment:
      - POSTGRES_HOST=restaurants_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    command: python background.py
    depends_on:
      - message_broker_rabmq
      - restaurants_ms_db
      - restaurants_ms_worker_migrations

  reservations_db:
    image: postgres:10
    restart: on-failure
    env_file:
      - reservations_ms.conf

  reservations_migrations:
    build: gos-reservation/
    env_file:
      - reservations_ms.conf
    environment:
      - POSTGRES_HOST=reservations_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    command: flask db upgrade
    restart: on-failure
    depends_on:
      - reservations_db
      - message_broker_rabmq

  reservations_worker:
    build: gos-reservation/
    env_file:
      - reservations_ms.conf
    environment:
      - POSTGRES_HOST=reservations_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      - reservations_db
      - message_broker_rabmq
      - reservations_migrations

  reservations_background_worker:
    build: gos-reservation/
    env_file:
      - reservations_ms.conf
    environment:
      - POSTGRES_HOST=reservations_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    command: python background.py
    depends_on:
      - reservations_db
      - message_broker_rabmq
      - reservations_migrations

  notifications_db:
    image: library/mongo:4.2.2
    restart: unless-stopped
    env_file:
      - notifications_ms.conf

  notifications_worker:
    build: gos-notifications/
    restart: unless-stopped
    env_file:
      - notifications_ms.conf
    environment:
      - MONGODB_HOST=notifications_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      - notifications_db
      - message_broker_rabmq

  notifications_background_worker:
    build: gos-notifications/
    restart: on-failure
    env_file:
      - notifications_ms.conf
    command: /bin/sh celery_entry.sh
    environment:
      - MONGODB_HOST=notifications_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      - notifications_db
      - message_broker_rabmq


volumes:
  #
  # Volumes declaration
  #

  nginx_conf:
  # Nginx configuration volume

  static_contents:
  # API Gateway static content volume