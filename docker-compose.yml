#######################################################################
#     mmm          mmmm           m     mmmm           m""            #
#   m"   "  mmm   m"  "m m   m  mm#mm  #"   "  mmm   mm#mm   mmm      #
#   #   mm #" "#  #    # #   #    #    "#mmm  "   #    #    #"  #     #
#   #    # #   #  #    # #   #    #        "# m"""#    #    #""""     #
#    "mmm" "#m#"   #mm#  "mm"#    "mm  "mmm#" "mm"#    #    "#mm"     #
#######################################################################
# Main Dockerfile

version: '3.8'

services:
  # -------------------------------------------- #
  # -------------------------------------------- #
  # Starting with API Gateway and Load Balancer  #
  # -------------------------------------------- #
  # -------------------------------------------- #

  nginx_lb_orchestrator:
    #
    # Nginx Orchestrator instance
    #
    container_name: load_balancer_orchestrator
    restart: always
    build: ./gos-api_gateway/nginx-orchestrator
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # WARNING: with Winzozz it does not work, but we need it!
      - nginx_conf:/etc/nginx/conf.d

  nginx_lb:
    #
    # Nginx single instance
    #
    container_name: load_balancer
    restart: always
    build: ./gos-api_gateway/nginx
    labels:
      - gooutsafe.nginx_lb
    volumes:
      - nginx_conf:/etc/nginx/conf.d
      - static_contents:/static
    ports:
      - "80:80"

  redis_cache:
    image: library/redis:6.0.9
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  api_gateway:
    #
    # API Gateway
    #
    # ! ! ! WARNING ! ! !
    # DO NOT set the container_name attribute and ports mapping
    # to allow the replication.
    #
    restart: always
    build: ./gos-api_gateway
    volumes:
      - static_contents:/static
    env_file:
      - gateway.conf
    environment:
      - REDIS_HOST=redis_cache
      - USERS_MS_HOST=users_ms_worker
      - RESTAURANTS_MS_HOST=restaurants_ms_worker
      - RESERVATIONS_MS_HOST=reservations_ms_worker
      - NOTIFICATIONS_MS_HOST=notifications_ms_worker
    labels:
      - gooutsafe.api_gateway_worker
    depends_on:
      redis_cache:
        condition: service_healthy

  # -------------------------------------------- #
  # -------------------------------------------- #
  # Common Services                              #
  # -------------------------------------------- #
  # -------------------------------------------- #

  message_broker_rabmq:
    #
    # Message Broker Rabbit MQ
    #
    image: library/rabbitmq:3.8.5-management
    ports:
      - "15672:15672" # Management URL (only for utility)
    env_file:
      - mb_rabmq.conf
    healthcheck:
      # basic health check
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # -------------------------------------------- #
  # -------------------------------------------- #
  # Users Microservice                           #
  # -------------------------------------------- #
  # -------------------------------------------- #

  users_ms_db:
    #
    # Users Microservice Database
    #
    image: library/postgres:10
    restart: on-failure
    env_file:
      - users_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  users_ms_migrations:
    #
    # Users Microservice Migrations
    #
    build: ./gos-users
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
      - REDIS_HOST=redis_cache
    restart: on-failure
    command: flask db upgrade
    depends_on:
      users_ms_db:
        condition: service_healthy

  users_ms_worker:
    #
    # Users Microservice Worker node
    #
    build: ./gos-users
    restart: on-failure
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
      - REDIS_HOST=redis_cache
    depends_on:
      users_ms_db:
        condition: service_healthy
      users_ms_migrations:
        condition: service_started
      message_broker_rabmq:
        condition: service_healthy
      redis_cache:
        condition: service_healthy

  users_ms_worker_bg:
    #
    # Users Microservices Worker node (background
    #
    build: ./gos-users
    restart: on-failure
    command: /bin/bash celery_entry.sh
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
      - REDIS_HOST=redis_cache
    depends_on:
      users_ms_db:
        condition: service_healthy
      users_ms_migrations:
        condition: service_started
      message_broker_rabmq:
        condition: service_healthy
      redis_cache:
        condition: service_healthy

  # -------------------------------------------- #
  # -------------------------------------------- #
  # Restaurants Microservice                     #
  # -------------------------------------------- #
  # -------------------------------------------- #

  restaurants_ms_db:
    #
    # Restaurant Microservice DB
    #
    image: library/postgres:10
    restart: on-failure
    env_file:
      - restaurants_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  restaurants_ms_migrations:
    #
    # Restaurant Migration Service
    #
    build: ./gos-restaurants
    restart: on-failure
    env_file:
      - restaurants_ms.conf
    command: flask db upgrade
    environment:
      - POSTGRES_HOST=restaurants_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      restaurants_ms_db:
        condition: service_healthy

  restaurants_ms_worker:
    #
    # Restaurant Service Flask Application
    #
    build: ./gos-restaurants
    restart: on-failure
    env_file:
      - restaurants_ms.conf
    environment:
      - POSTGRES_HOST=restaurants_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      restaurants_ms_db:
        condition: service_healthy
      restaurants_ms_migrations:
        condition: service_started

  restaurants_ms_worker_bg:
    #
    # Restaurant Service Background Worker
    #
    build: ./gos-restaurants
    restart: on-failure
    env_file:
      - restaurants_ms.conf
    environment:
      - POSTGRES_HOST=restaurants_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    command: python background.py
    depends_on:
      message_broker_rabmq:
        condition: service_healthy
      restaurants_ms_db:
        condition: service_healthy
      restaurants_ms_migrations:
        condition: service_started

  # -------------------------------------------- #
  # -------------------------------------------- #
  # Reservations Microservice                    #
  # -------------------------------------------- #
  # -------------------------------------------- #

  reservations_ms_db:
    image: postgres:10
    restart: on-failure
    env_file:
      - reservations_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  reservations_ms_migrations:
    build: gos-reservation/
    env_file:
      - reservations_ms.conf
    environment:
      - POSTGRES_HOST=reservations_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    command: flask db upgrade
    restart: on-failure
    depends_on:
      reservations_ms_db:
        condition: service_healthy
      message_broker_rabmq:
        condition: service_healthy

  reservations_ms_worker:
    build: gos-reservation/
    env_file:
      - reservations_ms.conf
    environment:
      - POSTGRES_HOST=reservations_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      reservations_ms_db:
        condition: service_healthy
      message_broker_rabmq:
        condition: service_healthy
      reservations_ms_migrations:
        condition: service_started

  reservations_ms_worker_bg:
    build: gos-reservation/
    env_file:
      - reservations_ms.conf
    environment:
      - POSTGRES_HOST=reservations_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    command: python background.py
    depends_on:
      reservations_ms_db:
        condition: service_healthy
      reservations_ms_migrations:
        condition: service_started
      message_broker_rabmq:
        condition: service_healthy

  # -------------------------------------------- #
  # -------------------------------------------- #
  # Notifications Service                        #
  # -------------------------------------------- #
  # -------------------------------------------- #

  notifications_ms_db:
    image: library/mongo:4.2.2
    restart: unless-stopped
    env_file:
      - notifications_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "mongo", "--eval", "\"db.adminCommand('ping')\"" ]
      interval: 10s
      timeout: 2s
      retries: 10

  notifications_ms_worker:
    build: gos-notifications/
    restart: unless-stopped
    env_file:
      - notifications_ms.conf
    environment:
      - MONGODB_HOST=notifications_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      notifications_ms_db:
        condition: service_healthy
      message_broker_rabmq:
        condition: service_healthy

  notifications_ms_worker_bg:
    build: gos-notifications/
    restart: on-failure
    env_file:
      - notifications_ms.conf
    command: /bin/sh celery_entry.sh
    environment:
      - MONGODB_HOST=notifications_ms_db
      - RABBIT_MQ_HOST=message_broker_rabmq
    depends_on:
      notifications_ms_db:
        condition: service_healthy
      message_broker_rabmq:
        condition: service_healthy

volumes:
  # -------------------------------------------- #
  # -------------------------------------------- #
  # Volumes                                      #
  # -------------------------------------------- #
  # -------------------------------------------- #

  nginx_conf:
  # Nginx configuration volume

  static_contents:
  # API Gateway static content volume
